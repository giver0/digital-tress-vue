{"ast":null,"code":"export default class treeObject {\n  constructor() {\n    this.cells = [];\n    this.lastCell = null;\n    this.headColor = null;\n    this.bodyColor = null;\n    this.counterBox = null;\n    this.counterCellBlock = null;\n    this.isFreeCellsAround = true;\n    this.setRandomColor();\n    this.id = digitalTrees.length;\n    digitalTrees.push(this);\n  }\n\n  refreshLastCell() {\n    this.lastCell = this.cells[this.cells.length - 1];\n  }\n\n  createCellTree() {\n    createCell(this.lastCell);\n  }\n\n  addFirstCell() {\n    try {\n      let firstCell = chooseRandomStartCell(fieldHeight, fieldWidth);\n      this.cells.push(firstCell);\n      this.cells[0].elementById.style.background = this.headColor;\n      this.cells[0].parentTree = this;\n      this.refreshLastCell();\n    } catch (error) {\n      console.log(\"===== Some Error ==========\");\n    }\n  }\n\n  createCell() {\n    let freeCellsArray = FreeCellsAround(this.lastCell);\n\n    if (freeCellsArray.length === 0) {\n      isAnyFreeCells = false;\n      this.isFreeCellsAround = false;\n    } else {\n      let FreeCellCoordinate = chooseRandomPoint(freeCellsArray);\n      let j = FreeCellCoordinate[0];\n      let i = FreeCellCoordinate[1];\n      this.addNextCell(j, i);\n    }\n  }\n\n  addNextCell(j, i) {\n    this.lastCell.elementById.style.background = this.bodyColor;\n    let nextCell = fieldCells[j][i];\n    nextCell.elementById.style.background = this.headColor;\n    nextCell.previousCell = this.lastCell;\n    nextCell.parentTree = this;\n    this.cells.push(nextCell);\n    nextCell.parentTree.refreshLastCell();\n    this.nextCell = nextCell;\n    let counterCellText = document.getElementById(`counter-trees-cell-box-text${this.id}`);\n    counterCellText.innerText = this.cells.length;\n    this.logInLogbox();\n    console.log([this.lastCell.i, this.lastCell.j] + \": thisCell \" + [i, j] + \": NextCell, \" + \"TreeID: \" + this.id);\n  }\n\n  logInLogbox() {\n    let log = document.createElement(\"div\");\n    log.className = \"digital-tree__field-left-logbox-text\";\n    let logText = `TreeID: ${this.id}; i: ${this.lastCell.i}; j:${this.lastCell.j};`; // counterBox.id = `TreeIndex${treeIndex}`\n\n    log.innerText = logText;\n    logbox.appendChild(log);\n    logbox.scrollTop = logbox.scrollHeight;\n  }\n\n  setRandomColor() {\n    this.headColor = generateRandomColor();\n    this.bodyColor = generateRandomColor();\n  }\n\n  changeRandomColor() {\n    this.setRandomColor();\n    this.counterCellBlock.style.background = this.bodyColor;\n  }\n\n  addCounterTreeCell() {\n    let counterBox = document.createElement(\"div\");\n    counterBox.className = \"digital-tree__counter-trees-cell-box\";\n    counterBox.id = `TreeIndex${this.id}`;\n    counterTreesCell.appendChild(counterBox);\n    this.counterBox = document.getElementById(`TreeIndex${this.id}`);\n    let newDiv = document.createElement(\"div\");\n    newDiv.className = blockClass;\n    newDiv.style.background = this.bodyColor;\n    newDiv.id = `counter-trees-cell-box${this.id}`;\n    this.counterBox.appendChild(newDiv);\n    this.counterCellBlock = document.getElementById(`counter-trees-cell-box${this.id}`);\n    let newDivText = document.createElement(\"div\");\n    newDivText.className = \"digital-tree__counter-trees-cell-box-text\";\n    newDivText.id = `counter-trees-cell-box-text${this.id}`;\n    newDivText.innerText = 0;\n    newDivText.style.background = \"none\";\n    this.counterBox.appendChild(newDivText);\n  }\n\n  deleteCounterTreeCell() {\n    this.counterBox.parentNode.removeChild(this.counterBox);\n  }\n\n  helloTree() {\n    console.log(\"Hello i'm tree\");\n  }\n\n}","map":{"version":3,"sources":["C:/Users/IvanEndorphin/Documents/GitLab/digital-trees/digital-trees-vue/src/components/classes/treeObject.js"],"names":["treeObject","constructor","cells","lastCell","headColor","bodyColor","counterBox","counterCellBlock","isFreeCellsAround","setRandomColor","id","digitalTrees","length","push","refreshLastCell","createCellTree","createCell","addFirstCell","firstCell","chooseRandomStartCell","fieldHeight","fieldWidth","elementById","style","background","parentTree","error","console","log","freeCellsArray","FreeCellsAround","isAnyFreeCells","FreeCellCoordinate","chooseRandomPoint","j","i","addNextCell","nextCell","fieldCells","previousCell","counterCellText","document","getElementById","innerText","logInLogbox","createElement","className","logText","logbox","appendChild","scrollTop","scrollHeight","generateRandomColor","changeRandomColor","addCounterTreeCell","counterTreesCell","newDiv","blockClass","newDivText","deleteCounterTreeCell","parentNode","removeChild","helloTree"],"mappings":"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","sourcesContent":["export default class treeObject { \r\n    constructor(){\r\n        this.cells = []\r\n        this.lastCell = null\r\n        this.headColor = null\r\n        this.bodyColor = null\r\n        this.counterBox = null\r\n        this.counterCellBlock = null\r\n        this.isFreeCellsAround = true\r\n        this.setRandomColor()\r\n        this.id = digitalTrees.length\r\n        digitalTrees.push(this)\r\n    }\r\n    refreshLastCell() {\r\n        this.lastCell = this.cells[this.cells.length-1]\r\n    }\r\n    createCellTree() {\r\n        createCell(this.lastCell)  \r\n    }\r\n    addFirstCell() {\r\n        try {\r\n            let firstCell = chooseRandomStartCell (fieldHeight, fieldWidth) \r\n            this.cells.push(firstCell)\r\n            this.cells[0].elementById.style.background = this.headColor\r\n            this.cells[0].parentTree = this\r\n            this.refreshLastCell()\r\n            \r\n        } catch (error) {\r\n            console.log(\"===== Some Error ==========\")\r\n        }\r\n    }       \r\n    createCell() {\r\n        let freeCellsArray = FreeCellsAround(this.lastCell)\r\n        if (freeCellsArray.length === 0) {\r\n            isAnyFreeCells = false   \r\n            this.isFreeCellsAround = false    \r\n        } else {\r\n            let FreeCellCoordinate = chooseRandomPoint (freeCellsArray)\r\n            let j = FreeCellCoordinate[0]\r\n            let i = FreeCellCoordinate[1]        \r\n            this.addNextCell(j, i)             \r\n            \r\n        }            \r\n    }\r\n    addNextCell(j, i) {\r\n        this.lastCell.elementById.style.background = this.bodyColor\r\n        let nextCell = fieldCells[j][i]\r\n        nextCell.elementById.style.background = this.headColor\r\n        nextCell.previousCell = this.lastCell\r\n        nextCell.parentTree = this\r\n        this.cells.push(nextCell)\r\n        nextCell.parentTree.refreshLastCell()\r\n        this.nextCell = nextCell\r\n\r\n        let counterCellText = document.getElementById(`counter-trees-cell-box-text${this.id}`)\r\n        counterCellText.innerText = this.cells.length\r\n        this.logInLogbox()\r\n        console.log([this.lastCell.i,this.lastCell.j]+\": thisCell \"+[i,j]+\": NextCell, \"+\"TreeID: \"+this.id)\r\n    }\r\n    logInLogbox() {\r\n        let log = document.createElement(\"div\")\r\n        log.className = \"digital-tree__field-left-logbox-text\"\r\n        let logText = `TreeID: ${this.id}; i: ${this.lastCell.i}; j:${this.lastCell.j};`\r\n        // counterBox.id = `TreeIndex${treeIndex}`\r\n        log.innerText = logText\r\n        logbox.appendChild(log)\r\n        logbox.scrollTop = logbox.scrollHeight;\r\n    }\r\n    setRandomColor() {\r\n        this.headColor = generateRandomColor()\r\n        this.bodyColor = generateRandomColor()\r\n    }\r\n    changeRandomColor() {\r\n        this.setRandomColor()\r\n        this.counterCellBlock.style.background = this.bodyColor\r\n    }\r\n    addCounterTreeCell() {\r\n        let counterBox = document.createElement(\"div\")\r\n        counterBox.className = \"digital-tree__counter-trees-cell-box\"\r\n        counterBox.id = `TreeIndex${this.id}`\r\n        counterTreesCell.appendChild(counterBox)\r\n        this.counterBox = document.getElementById(`TreeIndex${this.id}`)\r\n    \r\n        let newDiv = document.createElement(\"div\")\r\n        newDiv.className = blockClass\r\n        newDiv.style.background = this.bodyColor\r\n        newDiv.id = `counter-trees-cell-box${this.id}`\r\n        this.counterBox.appendChild(newDiv)\r\n        this.counterCellBlock = document.getElementById(`counter-trees-cell-box${this.id}`)\r\n    \r\n        let newDivText = document.createElement(\"div\")\r\n        newDivText.className = \"digital-tree__counter-trees-cell-box-text\"\r\n        newDivText.id = `counter-trees-cell-box-text${this.id}`\r\n        newDivText.innerText = 0\r\n        newDivText.style.background = \"none\"\r\n        this.counterBox.appendChild(newDivText)\r\n    }\r\n    deleteCounterTreeCell() {\r\n        this.counterBox.parentNode.removeChild(this.counterBox);\r\n    }\r\n    helloTree() {\r\n        console.log(\"Hello i'm tree\")\r\n    }\r\n} \r\n"]},"metadata":{},"sourceType":"module"}