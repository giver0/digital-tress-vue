{"ast":null,"code":"import cellObject from '../classes/cellObject';\nconst filedBox = {\n  name: 'fieldBox',\n  components: {},\n\n  data() {\n    return {\n      fieldCells: [],\n      fieldWidth: 11,\n      fieldHeight: 5,\n      spaceBetweenBlocks: 5,\n      blockSize: 50,\n      message: \"Welcome\",\n      blockClass: \"block\",\n      blocksFields: null\n    };\n  },\n\n  methods: {\n    makeFieldCells2d() {\n      for (let i = 0; i < this.fieldHeight; i++) {\n        this.fieldCells.push([]);\n      }\n    },\n\n    changeFieldSize() {\n      let newHeight = this.fieldHeight * this.blockSize + this.fieldHeight * this.spaceBetweenBlocks;\n      let newWidth = this.fieldWidth * this.blockSize + this.fieldWidth * this.spaceBetweenBlocks;\n      this.$el.querySelector(`#space-for-blocks`).style.width = `${newWidth}px`;\n      this.$el.querySelector(`#space-for-blocks`).style.height = `${newHeight}px`;\n    },\n\n    createField() {\n      let newDivRaw;\n\n      for (let j = 0; j < this.fieldHeight; j++) {\n        newDivRaw = document.createElement(\"div\");\n        newDivRaw.className = \"blocks-field-raw\";\n        newDivRaw.id = `blocks-field-raw${j}`;\n\n        for (let i = 0; i < this.fieldWidth; i++) {\n          document.body.onload = new cellObject(i, j, this.blocksFields, this.blockClass, newDivRaw);\n        }\n\n        this.blocksFields.appendChild(newDivRaw);\n      }\n    }\n\n  },\n\n  created() {\n    console.log(\"Hi\");\n    this.makeFieldCells2d();\n    console.log(this.fieldCells); // changeFieldSize(this.fieldHeight, this.fieldWidth)    \n  },\n\n  mounted() {\n    console.log(\"Hi Mounted\");\n    this.$refs.myId3.innerText = 'Hello Bro';\n    this.blocksFields = this.$el.querySelector(`#space-for-blocks`);\n    this.changeFieldSize(); // let newDivRaw = document.createElement(\"div\");\n    //   newDivRaw.className = this.blockClass\n    //   newDivRaw.id = `i0j0`\n    //   newDivRaw.ref = `i0j0`\n    //   // newDivRaw.id = `i${i}j${j}`\n    //   // this.elementById = document.getElementById(`i${i}j${j}`);\n    //   // fieldCells[j].push(this)\n    //   this.$refs.blocksFields.appendChild(newDivRaw)\n    //   this.$el.querySelector(`#i0j0`).style.background = \"blue\"\n\n    this.createField();\n  }\n\n};\nexport default filedBox;","map":{"version":3,"mappings":"AA4CA,OAAOA,UAAP,MAAuB,uBAAvB;AAGA,MAAMC,QAAO,GAAI;AACfC,MAAI,EAAE,UADS;AAEfC,YAAU,EAAE,EAFG;;AAKfC,MAAI,GAAG;AACL,WAAO;AACLC,gBAAU,EAAC,EADN;AAELC,gBAAU,EAAE,EAFP;AAGLC,iBAAW,EAAE,CAHR;AAILC,wBAAkB,EAAE,CAJf;AAKLC,eAAS,EAAE,EALN;AAMLC,aAAO,EAAC,SANH;AAOLC,gBAAU,EAAE,OAPP;AAQLC,kBAAY,EAAE;AART,KAAP;AAWC,GAjBY;;AAkBbC,SAAO,EAAE;AACPC,oBAAe,GAAK;AAClB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKR,WAAzB,EAAsCQ,CAAC,EAAvC,EAA2C;AACzC,aAAKV,UAAL,CAAgBW,IAAhB,CAAqB,EAArB;AACF;AACD,KALM;;AAMPC,mBAAe,GAAG;AAChB,UAAIC,SAAQ,GAAI,KAAKX,WAAL,GAAiB,KAAKE,SAAtB,GAAgC,KAAKF,WAAL,GAAiB,KAAKC,kBAAtE;AACA,UAAIW,QAAO,GAAI,KAAKb,UAAL,GAAgB,KAAKG,SAArB,GAA+B,KAAKH,UAAL,GAAgB,KAAKE,kBAAnE;AACA,WAAKY,GAAL,CAASC,aAAT,CAAwB,mBAAxB,EAA4CC,KAA5C,CAAkDC,KAAlD,GAA2D,GAAEJ,QAAS,IAAtE;AACA,WAAKC,GAAL,CAASC,aAAT,CAAwB,mBAAxB,EAA4CC,KAA5C,CAAkDE,MAAlD,GAA4D,GAAEN,SAAU,IAAxE;AACD,KAXM;;AAYPO,eAAU,GAAK;AACb,UAAIC,SAAJ;;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKpB,WAAzB,EAAsCoB,CAAC,EAAvC,EAA2C;AACzCD,iBAAQ,GAAIE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAH,iBAAS,CAACI,SAAV,GAAsB,kBAAtB;AACAJ,iBAAS,CAACK,EAAV,GAAgB,mBAAkBJ,CAAE,EAApC;;AACA,aAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAI,KAAKT,UAAzB,EAAqCS,CAAC,EAAtC,EAA0C;AACxCa,kBAAQ,CAACI,IAAT,CAAcC,MAAd,GAAuB,IAAIjC,UAAJ,CAAee,CAAf,EAAkBY,CAAlB,EAAqB,KAAKf,YAA1B,EAAwC,KAAKD,UAA7C,EAAyDe,SAAzD,CAAvB;AACF;;AACF,aAAKd,YAAL,CAAkBsB,WAAlB,CAA8BR,SAA9B;AAEA;AACD;;AAxBM,GAlBI;;AA6CbS,SAAO,GAAG;AACRC,WAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKvB,gBAAL;AACAsB,WAAO,CAACC,GAAR,CAAY,KAAKhC,UAAjB,EAHQ,CAIR;AAED,GAnDY;;AAoDbiC,SAAO,GAAG;AACRF,WAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAKE,KAAL,CAAWC,KAAX,CAAiBC,SAAjB,GAA6B,WAA7B;AACA,SAAK7B,YAAL,GAAoB,KAAKQ,GAAL,CAASC,aAAT,CAAwB,mBAAxB,CAApB;AACA,SAAKJ,eAAL,GAJQ,CAMR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAKQ,WAAL;AAEJ;;AAtEe,CAAjB;AAwEA,eAAexB,QAAf","names":["cellObject","filedBox","name","components","data","fieldCells","fieldWidth","fieldHeight","spaceBetweenBlocks","blockSize","message","blockClass","blocksFields","methods","makeFieldCells2d","i","push","changeFieldSize","newHeight","newWidth","$el","querySelector","style","width","height","createField","newDivRaw","j","document","createElement","className","id","body","onload","appendChild","created","console","log","mounted","$refs","myId3","innerText"],"sourceRoot":"","sources":["C:\\Users\\IvanEndorphin\\Documents\\GitLab\\digital-trees\\digital-trees-vue\\src\\components\\field-box\\field-box.vue"],"sourcesContent":["<template>\r\n    <div class=\"digital-tree__layout\">\r\n        <div class=\"digital-tree__field-left\">\r\n            <div class=\"digital-tree__field-left-control\">\r\n                <img src=\"https://img.icons8.com/external-bearicons-glyph-bearicons/64/000000/external-Pause-essential-collection-bearicons-glyph-bearicons.png\" class=\"digital-tree__field-left-control-button\" height=\"56px\" id=\"field-left-control-pause\"/>\r\n                <img src=\"https://img.icons8.com/glyph-neue/64/000000/restart.png\" class=\"digital-tree__field-left-control-button\" id=\"field-left-control-restart\"/>\r\n                <img src=\"@/assets/paint-palette-svgrepo-com.svg\" class=\"digital-tree__field-left-control-button\" id=\"field-left-control-color\" />\r\n            </div>\r\n            <div ref=\"myId3\">{{ message }}</div>\r\n            <div class=\"digital-tree__field-left-title\">\r\n                Logbox\r\n            </div>\r\n            <div class=\"digital-tree__field-left-logbox\" id=\"left-logbox\">\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"blocks-field\" id=\"space-for-blocks\" ref=\"blocksFields\">      \r\n        </div>\r\n        <div class=\"digital-tree__counter\">\r\n            <div class=\"digital-tree__counter-title\">\r\n                All cycle from start\r\n            </div>\r\n            <div class=\"digital-tree__counter-count\" id=\"counter-count\">0</div>\r\n            <div class=\"digital-tree__counter-title\">\r\n                Full cycle count\r\n            </div>\r\n            <div class=\"digital-tree__counter-count\" id=\"counter-fullCircle-count\">0</div>\r\n            <div class=\"digital-tree__counter-box\">\r\n                <div class=\"digital-tree__counter-text-before\">Delay </div>\r\n                <input type=\"number\" id=\"counter-speed\" oninput=\"changeSpeed()\" placeholder=\"Speed\" name=\"quantity\" step=\"10\" min=\"0\" max=\"300\" value=\"100\">  \r\n                <div class=\"digital-tree__counter-text-after\">ms</div>\r\n            </div>\r\n            <div class=\"digital-tree__counter-box\">\r\n                <div class=\"digital-tree__counter-text-before\" >Tree count</div>\r\n                <input type=\"number\" id=\"counter-tree\" placeholder=\"Tree count\" name=\"quantity\" step=\"1\" min=\"0\" max=\"10\" value=\"3\">  \r\n            </div>\r\n            <div class=\"digital-tree__counter-trees-cell-box\" id=\"counter-trees-cell\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport cellObject from '../classes/cellObject'\r\n\r\n\r\nconst filedBox = {\r\n  name: 'fieldBox',\r\n  components: {    \r\n  },\r\n    \r\n  data() {\r\n    return {\r\n      fieldCells:[],\r\n      fieldWidth: 11,\r\n      fieldHeight: 5,\r\n      spaceBetweenBlocks: 5,\r\n      blockSize: 50,\r\n      message:\"Welcome\",\r\n      blockClass: \"block\",\r\n      blocksFields: null      \r\n\r\n    }\r\n    },\r\n    methods: {\r\n      makeFieldCells2d () {\r\n        for (let i = 0; i < this.fieldHeight; i++) {\r\n          this.fieldCells.push([])        \r\n        }\r\n      },\r\n      changeFieldSize() {\r\n        let newHeight = this.fieldHeight*this.blockSize+this.fieldHeight*this.spaceBetweenBlocks\r\n        let newWidth = this.fieldWidth*this.blockSize+this.fieldWidth*this.spaceBetweenBlocks\r\n        this.$el.querySelector(`#space-for-blocks`).style.width = `${newWidth}px`\r\n        this.$el.querySelector(`#space-for-blocks`).style.height = `${newHeight}px`    \r\n      },\r\n      createField () {\r\n        let newDivRaw\r\n        for (let j = 0; j < this.fieldHeight; j++) {\r\n          newDivRaw = document.createElement(\"div\");\r\n          newDivRaw.className = \"blocks-field-raw\"\r\n          newDivRaw.id = `blocks-field-raw${j}`\r\n          for (let i = 0; i < this.fieldWidth; i++) {\r\n            document.body.onload = new cellObject(i, j, this.blocksFields, this.blockClass, newDivRaw);  \r\n          }\r\n        this.blocksFields.appendChild(newDivRaw)\r\n\r\n        }\r\n      },\r\n      \r\n    },\r\n    created() {\r\n      console.log(\"Hi\")\r\n      this.makeFieldCells2d()\r\n      console.log(this.fieldCells)\r\n      // changeFieldSize(this.fieldHeight, this.fieldWidth)    \r\n\r\n    },\r\n    mounted() {\r\n      console.log(\"Hi Mounted\")\r\n      this.$refs.myId3.innerText = 'Hello Bro' \r\n      this.blocksFields = this.$el.querySelector(`#space-for-blocks`)\r\n      this.changeFieldSize()\r\n      \r\n      // let newDivRaw = document.createElement(\"div\");\r\n      //   newDivRaw.className = this.blockClass\r\n      //   newDivRaw.id = `i0j0`\r\n      //   newDivRaw.ref = `i0j0`\r\n      //   // newDivRaw.id = `i${i}j${j}`\r\n      //   // this.elementById = document.getElementById(`i${i}j${j}`);\r\n      //   // fieldCells[j].push(this)\r\n      //   this.$refs.blocksFields.appendChild(newDivRaw)\r\n      //   this.$el.querySelector(`#i0j0`).style.background = \"blue\"\r\n\r\n      this.createField ()\r\n      \r\n  }\r\n}\r\nexport default filedBox\r\n</script>\r\n\r\n<style>\r\n@import \"field-box\";\r\n</style>"]},"metadata":{},"sourceType":"module"}